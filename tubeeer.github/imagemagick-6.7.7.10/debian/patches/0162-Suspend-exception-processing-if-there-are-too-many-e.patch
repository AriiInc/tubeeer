Backport of:

From 1c8d232394fdeb3f3fb083d1c6a964ff67d6d353 Mon Sep 17 00:00:00 2001
From: Cristy <urban-warrior@imagemagick.org>
Date: Sun, 29 May 2016 11:38:56 -0400
Subject: [PATCH] Suspend exception processing if there are too many exceptions

origin: upstream, https://github.com/ImageMagick/ImageMagick/commit/0474237508f39c4f783208123431815f1ededb76
bug-debian: htts://bugs.debian.org/845213

(cherry picked from commit 0474237508f39c4f783208123431815f1ededb76)
---
 coders/label.c          | 12 ++++++----
 coders/viff.c           | 21 +++--------------
 magick/exception.c      | 26 ++++++++++++++++----
 magick/memory-private.h |  3 +++
 magick/memory.c         | 63 +++++++++++++++++++++++++++++++++----------------
 5 files changed, 77 insertions(+), 48 deletions(-)

Last-Update: 2017-02-22

Index: imagemagick-6.7.7.10/coders/label.c
===================================================================
--- imagemagick-6.7.7.10.orig/coders/label.c	2017-02-22 10:03:08.800801710 -0500
+++ imagemagick-6.7.7.10/coders/label.c	2017-02-22 10:03:37.333115005 -0500
@@ -169,9 +169,9 @@
       return((Image *) NULL);
     }
   if (image->columns == 0)
-    image->columns=(size_t) (metrics.width+draw_info->stroke_width+1.5);
+    image->columns=(size_t) floor(metrics.width+draw_info->stroke_width+1.5);
   if (image->columns == 0)
-    image->columns=(size_t) (draw_info->pointsize+draw_info->stroke_width+1.5);
+    image->columns=(size_t) floor(draw_info->pointsize+draw_info->stroke_width+1.5);
   if (draw_info->gravity == UndefinedGravity)
     {
       (void) FormatLocaleString(geometry,MaxTextExtent,"%+g%+g",
Index: imagemagick-6.7.7.10/coders/viff.c
===================================================================
--- imagemagick-6.7.7.10.orig/coders/viff.c	2017-02-22 10:03:08.800801710 -0500
+++ imagemagick-6.7.7.10/coders/viff.c	2017-02-22 10:03:08.796801666 -0500
@@ -57,6 +57,7 @@
 #include "magick/list.h"
 #include "magick/magick.h"
 #include "magick/memory_.h"
+#include "magick/memory-private.h"
 #include "magick/monitor.h"
 #include "magick/monitor-private.h"
 #include "magick/property.h"
@@ -139,22 +140,6 @@
 %    o exception: return any errors or warnings in this structure.
 %
 */
-
-static MagickBooleanType CheckMemoryOverflow(const size_t count,
-  const size_t quantum)
-{
-  size_t
-    size;
-
-  size=count*quantum;
-  if ((count == 0) || (quantum != (size/count)))
-    {
-      errno=ENOMEM;
-      return(MagickTrue);
-    }
-  return(MagickFalse);
-}
-
 static Image *ReadVIFFImage(const ImageInfo *image_info,
   ExceptionInfo *exception)
 {
@@ -514,13 +499,13 @@
     }
     if (viff_info.data_storage_type == VFF_TYP_BIT)
       {
-        if (CheckMemoryOverflow((image->columns+7UL) >> 3UL,image->rows) != MagickFalse)
+        if (HeapOverflowSanityCheck((image->columns+7UL) >> 3UL,image->rows) != MagickFalse)
           ThrowReaderException(ResourceLimitError,"MemoryAllocationFailed");
         max_packets=((image->columns+7UL) >> 3UL)*image->rows;
       }
     else
       {
-        if (CheckMemoryOverflow(number_pixels,viff_info.number_data_bands) != MagickFalse)
+        if (HeapOverflowSanityCheck(number_pixels,viff_info.number_data_bands) != MagickFalse)
           ThrowReaderException(ResourceLimitError,"MemoryAllocationFailed");
         max_packets=(size_t) (number_pixels*viff_info.number_data_bands);
       }
Index: imagemagick-6.7.7.10/magick/exception.c
===================================================================
--- imagemagick-6.7.7.10.orig/magick/exception.c	2017-02-22 10:03:08.800801710 -0500
+++ imagemagick-6.7.7.10/magick/exception.c	2017-02-22 10:03:08.800801710 -0500
@@ -53,6 +53,11 @@
 #include "magick/utility.h"
 
 /*
+  Global declarations.
+*/
+#define MaxExceptions  128
+
+/*
   Forward declarations.
 */
 #if defined(__cplusplus) || defined(c_plusplus)
@@ -202,6 +207,9 @@
   register const ExceptionInfo
     *p;
 
+  ssize_t
+    i;
+
   assert(exception != (ExceptionInfo *) NULL);
   assert(exception->signature == MagickSignature);
   if (exception->exceptions  == (void *) NULL)
@@ -210,14 +218,22 @@
   ResetLinkedListIterator((LinkedListInfo *) exception->exceptions);
   p=(const ExceptionInfo *) GetNextValueInLinkedList((LinkedListInfo *)
     exception->exceptions);
-  while (p != (const ExceptionInfo *) NULL)
+  for (i=0; p != (const ExceptionInfo *) NULL; i++)
   {
-    if ((p->severity >= WarningException) && (p->severity < ErrorException))
-      MagickWarning(p->severity,p->reason,p->description);
-    if ((p->severity >= ErrorException) && (p->severity < FatalErrorException))
-      MagickError(p->severity,p->reason,p->description);
     if (p->severity >= FatalErrorException)
       MagickFatalError(p->severity,p->reason,p->description);
+    if (i < MaxExceptions)
+      {
+        if ((p->severity >= ErrorException) && 
+            (p->severity < FatalErrorException))
+          MagickError(p->severity,p->reason,p->description);
+        if ((p->severity >= WarningException) && (p->severity < ErrorException))
+          MagickWarning(p->severity,p->reason,p->description);
+      }
+    else
+      if (i == MaxExceptions)
+        MagickError(ResourceLimitError,"too many exceptions",
+          "exception processing suspended");
     p=(const ExceptionInfo *) GetNextValueInLinkedList((LinkedListInfo *)
       exception->exceptions);
   }
Index: imagemagick-6.7.7.10/magick/memory-private.h
===================================================================
--- imagemagick-6.7.7.10.orig/magick/memory-private.h	2017-02-22 10:03:08.800801710 -0500
+++ imagemagick-6.7.7.10/magick/memory-private.h	2017-02-22 10:03:08.800801710 -0500
@@ -25,6 +25,9 @@
 #define CACHE_LINE_SIZE  (16*sizeof(void *))
 #define CacheAlign(size)  ((size) < CACHE_LINE_SIZE ? CACHE_LINE_SIZE : (size))
 
+MagickExport MagickBooleanType
+  HeapOverflowSanityCheck(const size_t,const size_t) magick_alloc_sizes(1,2);
+
 #if defined(__cplusplus) || defined(c_plusplus)
 }
 #endif
Index: imagemagick-6.7.7.10/magick/memory.c
===================================================================
--- imagemagick-6.7.7.10.orig/magick/memory.c	2017-02-22 10:03:08.800801710 -0500
+++ imagemagick-6.7.7.10/magick/memory.c	2017-02-22 10:03:08.800801710 -0500
@@ -186,28 +186,12 @@
 %    o quantum: the number of bytes in each quantum.
 %
 */
-
-static MagickBooleanType CheckMemoryOverflow(const size_t count,
-  const size_t quantum)
-{
-  size_t
-    size;
-
-  size=count*quantum;
-  if ((count == 0) || (quantum != (size/count)))
-    {
-      errno=ENOMEM;
-      return(MagickTrue);
-    }
-  return(MagickFalse);
-}
-
 MagickExport void *AcquireAlignedMemory(const size_t count,const size_t quantum)
 {
   size_t
     size;
 
-  if (CheckMemoryOverflow(count,quantum) != MagickFalse)
+  if (HeapOverflowSanityCheck(count,quantum) != MagickFalse)
     return((void *) NULL);
   size=count*quantum;
 #if defined(MAGICKCORE_HAVE_POSIX_MEMALIGN)
@@ -470,7 +454,7 @@
   size_t
     extent;
 
-  if (CheckMemoryOverflow(count,quantum) != MagickFalse)
+  if (HeapOverflowSanityCheck(count,quantum) != MagickFalse)
     return((void *) NULL);
   extent=count*quantum;
   return(AcquireMagickMemory(extent));
@@ -699,6 +683,45 @@
 %                                                                             %
 %                                                                             %
 %                                                                             %
++   H e a p O v e r f l o w S a n i t y C h e c k                             %
+%                                                                             %
+%                                                                             %
+%                                                                             %
+%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
+%
+%  HeapOverflowSanityCheck() returns MagickTrue if the heap allocation request
+%  does not exceed the maximum limits of a size_t otherwise MagickFalse.
+%
+%  The format of the HeapOverflowSanityCheck method is:
+%
+%      MagickBooleanType HeapOverflowSanityCheck(const size_t count,
+%        const size_t quantum)
+%
+%  A description of each parameter follows:
+%
+%    o size: the size of the memory in bytes we require.
+%
+*/
+MagickExport MagickBooleanType HeapOverflowSanityCheck(const size_t count,
+  const size_t quantum)
+{
+  size_t
+    size;
+
+  size=count*quantum;
+  if ((count == 0) || (quantum != (size/count)))
+    {
+      errno=ENOMEM;
+      return(MagickTrue);
+    }
+  return(MagickFalse);
+}
+
+/*
+%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
+%                                                                             %
+%                                                                             %
+%                                                                             %
 %   R e l i n q u i s h A l i g n e d M e m o r y                             %
 %                                                                             %
 %                                                                             %
@@ -939,7 +962,7 @@
   size_t
     extent;
 
-  if (CheckMemoryOverflow(count,quantum) != MagickFalse)
+  if (HeapOverflowSanityCheck(count,quantum) != MagickFalse)
     {
       memory=RelinquishMagickMemory(memory);
       return((void *) NULL);
