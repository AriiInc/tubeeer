Backport of:

From 50274ff905ac89033b3606848d70b4484ba129d1 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Bastien=20ROUCARI=C3=88S?= <roucaries.bastien@gmail.com>
Date: Fri, 19 May 2017 23:49:04 +0200
Subject: [PATCH] CVE-2017-8346

The ReadDCMImage function in dcm.c allows
attackers to cause a denial of service (memory leak) via a crafted
file.

bug: https://github.com/ImageMagick/ImageMagick/issues/440
origin: https://github.com/ImageMagick/ImageMagick/commit/528b8990f86c19d9f78c90b06fb5dd76f399ce3d
bug-debian: https://bugs.debian.org/862575
---
 coders/dcm.c | 34 ++++++++++++++++++++++------------
 1 file changed, 22 insertions(+), 12 deletions(-)

Index: imagemagick-6.7.7.10/coders/dcm.c
===================================================================
--- imagemagick-6.7.7.10.orig/coders/dcm.c	2017-05-26 08:56:18.489181864 -0400
+++ imagemagick-6.7.7.10/coders/dcm.c	2017-05-26 08:57:07.941811746 -0400
@@ -2865,6 +2865,15 @@ static Image *ReadDCMImage(const ImageIn
   unsigned char
     *data;
 
+ #define ThrowDCMReaderException(exception,message) \
+ { \
+  if (data != (unsigned char *) NULL) \
+    data=(unsigned char *) RelinquishMagickMemory(data); \
+  if (stream_info != (DCMStreamInfo *) NULL) \
+    stream_info=(DCMStreamInfo *) RelinquishMagickMemory(stream_info); \
+  ThrowReaderException((exception),(message)); \
+ }
+
   /*
     Open image file.
   */
@@ -2886,19 +2895,20 @@ static Image *ReadDCMImage(const ImageIn
   /*
     Read DCM preamble.
   */
+  data=(unsigned char *) NULL;
   stream_info=(DCMStreamInfo *) AcquireMagickMemory(sizeof(*stream_info));
   if (stream_info == (DCMStreamInfo *) NULL)
-    ThrowReaderException(ResourceLimitError,"MemoryAllocationFailed");
+    ThrowDCMReaderException(ResourceLimitError,"MemoryAllocationFailed");
   (void) ResetMagickMemory(stream_info,0,sizeof(*stream_info));
   count=ReadBlob(image,128,(unsigned char *) magick);
   if (count != 128)
-    ThrowReaderException(CorruptImageError,"ImproperImageHeader");
+    ThrowDCMReaderException(CorruptImageError,"ImproperImageHeader");
   count=ReadBlob(image,4,(unsigned char *) magick);
   if ((count != 4) || (LocaleNCompare(magick,"DICM",4) != 0))
     {
       offset=SeekBlob(image,0L,SEEK_SET);
       if (offset < 0)
-        ThrowReaderException(CorruptImageError,"ImproperImageHeader");
+	ThrowDCMReaderException(CorruptImageError,"ImproperImageHeader");
     }
   /*
     Read DCM Medical image.
@@ -2963,7 +2973,7 @@ static Image *ReadDCMImage(const ImageIn
       {
         offset=SeekBlob(image,(MagickOffsetType) -2,SEEK_CUR);
         if (offset < 0)
-          ThrowReaderException(CorruptImageError,"ImproperImageHeader");
+          ThrowDCMReaderException(CorruptImageError,"ImproperImageHeader");
         quantum=4;
       }
     else
@@ -3058,7 +3068,7 @@ static Image *ReadDCMImage(const ImageIn
                 data=(unsigned char *) AcquireQuantumMemory(length+1,quantum*
                   sizeof(*data));
               if (data == (unsigned char *) NULL)
-                ThrowReaderException(ResourceLimitError,
+                ThrowDCMReaderException(ResourceLimitError,
                   "MemoryAllocationFailed");
               count=ReadBlob(image,(size_t) quantum*length,data);
               if (count != (ssize_t) (quantum*length))
@@ -3066,7 +3076,7 @@ static Image *ReadDCMImage(const ImageIn
                   (void) FormatLocaleFile(stdout,"count=%d quantum=%d "
                     "length=%d group=%d\n",(int) count,(int) quantum,(int)
                     length,(int) group);
-                   ThrowReaderException(CorruptImageError,
+                   ThrowDCMReaderException(CorruptImageError,
                      "InsufficientImageDataInFile");
                 }
               data[length*quantum]='\0';
@@ -3221,7 +3231,7 @@ static Image *ReadDCMImage(const ImageIn
               bytes_per_pixel=2;
             depth=bits_allocated;
             if (depth > 32)
-              ThrowReaderException(CorruptImageError,"ImproperImageHeader");
+              ThrowDCMReaderException(CorruptImageError,"ImproperImageHeader");
             max_value=(1UL << bits_allocated)-1;
             break;
           }
@@ -3236,7 +3246,7 @@ static Image *ReadDCMImage(const ImageIn
               bytes_per_pixel=2;
             depth=significant_bits;
             if (depth > 32)
-              ThrowReaderException(CorruptImageError,"ImproperImageHeader");
+              ThrowDCMReaderException(CorruptImageError,"ImproperImageHeader");
             max_value=(1UL << significant_bits)-1;
             mask=(size_t) GetQuantumRange(significant_bits);
             break;
@@ -3287,7 +3297,7 @@ static Image *ReadDCMImage(const ImageIn
             graymap=(int *) AcquireQuantumMemory((size_t) colors,
               sizeof(*graymap));
             if (graymap == (int *) NULL)
-              ThrowReaderException(ResourceLimitError,"MemoryAllocationFailed");
+              ThrowDCMReaderException(ResourceLimitError,"MemoryAllocationFailed");
             for (i=0; i < (ssize_t) colors; i++)
               if (bytes_per_pixel == 1)
                 graymap[i]=(int) data[i];
@@ -3310,7 +3320,7 @@ static Image *ReadDCMImage(const ImageIn
             redmap=(int *) AcquireQuantumMemory((size_t) colors,
               sizeof(*redmap));
             if (redmap == (int *) NULL)
-              ThrowReaderException(ResourceLimitError,"MemoryAllocationFailed");
+              ThrowDCMReaderException(ResourceLimitError,"MemoryAllocationFailed");
             p=data;
             for (i=0; i < (ssize_t) colors; i++)
             {
@@ -3338,7 +3348,7 @@ static Image *ReadDCMImage(const ImageIn
             greenmap=(int *) AcquireQuantumMemory((size_t) colors,
               sizeof(*greenmap));
             if (greenmap == (int *) NULL)
-              ThrowReaderException(ResourceLimitError,"MemoryAllocationFailed");
+              ThrowDCMReaderException(ResourceLimitError,"MemoryAllocationFailed");
             p=data;
             for (i=0; i < (ssize_t) colors; i++)
             {
@@ -3366,7 +3376,7 @@ static Image *ReadDCMImage(const ImageIn
             bluemap=(int *) AcquireQuantumMemory((size_t) colors,
               sizeof(*bluemap));
             if (bluemap == (int *) NULL)
-              ThrowReaderException(ResourceLimitError,"MemoryAllocationFailed");
+              ThrowDCMReaderException(ResourceLimitError,"MemoryAllocationFailed");
             p=data;
             for (i=0; i < (ssize_t) colors; i++)
             {
